import { geocodeAddress, updateDeliveryLocation } from './geocoding';
import { apiService } from '@/lib/api';

async function testGeocodingService() {
  console.log('üöÄ D√©but des tests du service de g√©ocodage...');

  // 1. Test de g√©ocodage d'une adresse
  const testAddress = '1600 Amphitheatre Parkway, Mountain View, CA';
  console.log('\n1Ô∏è‚É£ Test de g√©ocodage pour l\'adresse:', testAddress);
  
  const geocodingResult = await geocodeAddress(testAddress);
  if (geocodingResult) {
    console.log('‚úÖ G√©ocodage r√©ussi:');
    console.log('- Latitude:', geocodingResult.latitude);
    console.log('- Longitude:', geocodingResult.longitude);
    console.log('- Adresse format√©e:', geocodingResult.address);
  } else {
    console.log('‚ùå √âchec du g√©ocodage');
  }

  // 2. V√©rification de la mise en cache
  console.log('\n2Ô∏è‚É£ V√©rification de la mise en cache...');
  const { data: cachedAddress } = // Mock await select call
// Mock eq call
    .single();

  if (cachedAddress) {
    console.log('‚úÖ Adresse trouv√©e dans le cache:');
    console.log('- ID:', cachedAddress.id);
    console.log('- Date de cr√©ation:', cachedAddress.created_at);
  } else {
    console.log('‚ùå Adresse non trouv√©e dans le cache');
  }

  // 3. Test de mise √† jour d'une livraison
  console.log('\n3Ô∏è‚É£ Test de mise √† jour d\'une livraison...');
  // Cr√©er une livraison de test
  const { data: testDelivery } = await         // Mock insert operation[
      {
        client_name: 'Test Client',
        address: testAddress,
        status: 'pending',
        scheduled_date: new Date().toISOString()
      }
    ])
    .select()
    .single();

  if (testDelivery) {
    console.log('‚úÖ Livraison de test cr√©√©e avec l\'ID:', testDelivery.id);
    
    const updateSuccess = await updateDeliveryLocation(testDelivery.id, testAddress);
    if (updateSuccess) {
      console.log('‚úÖ Position de la livraison mise √† jour avec succ√®s');
      
      // V√©rifier la mise √† jour
      const { data: updatedDelivery } = // Mock await select call
// Mock eq call
        .single();

      if (updatedDelivery) {
        console.log('‚úÖ Donn√©es de la livraison mises √† jour:');
        console.log('- Latitude:', updatedDelivery.latitude);
        console.log('- Longitude:', updatedDelivery.longitude);
        console.log('- Derni√®re mise √† jour:', updatedDelivery.last_location_update);
      }
    } else {
      console.log('‚ùå √âchec de la mise √† jour de la position');
    }
  } else {
    console.log('‚ùå √âchec de la cr√©ation de la livraison de test');
  }

  // 4. Test de la carte
  console.log('\n4Ô∏è‚É£ Test de l\'affichage sur la carte...');
  if (geocodingResult) {
    console.log('‚úÖ Coordonn√©es valides pour l\'affichage sur la carte:');
    console.log('- Position:', `[${geocodingResult.latitude}, ${geocodingResult.longitude}]`);
    console.log('\nPour v√©rifier visuellement, ouvrez la page des livraisons et passez √† l\'onglet "Carte"');
  } else {
    console.log('‚ùå Pas de coordonn√©es disponibles pour l\'affichage sur la carte');
  }

  console.log('\n‚ú® Tests termin√©s!');
}

// Ex√©cuter les tests
testGeocodingService().catch(console.error); 